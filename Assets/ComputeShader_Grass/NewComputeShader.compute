#pragma kernel UpdateBlade
#define UNITY_TWO_PI 6.28
#define UNITY_PI 3.14
#define VERTEX_NUM 9

int pointNum;
float _Interval;


struct BladeData
{
	float3 posWS[VERTEX_NUM];
	float3 normalWS[VERTEX_NUM];
};

float4 _ObjectPosition;


Texture2D _WindTexture;
SamplerState sampler_WindTexture
{
    Filter = MIN_MAG_MIP_LINEAR;
    AddressU = Wrap;
    AddressV = Wrap;
};

Texture2D _GrassToward;
SamplerState sampler_GrassToward
{
    Filter = MIN_MAG_MIP_LINEAR;
    AddressU = Wrap;
    AddressV = Wrap;
};

float3 _Moving_Position;
float _ImpactRadius;

float _WindStrengthFactor;
float _WindFrequency;
float _Time;
int _FieldWidth;

float _BladeWidth;
float _BladeHeight;
float _BendRotationRandom;
float _BendDownFactor;
float _Curve ;
float _BendStrength ;




//声明buffer

RWStructuredBuffer<BladeData> BladeDataBuffer;

RWStructuredBuffer<float3> BladeInPosBuffer;
AppendStructuredBuffer<BladeData> CullingResultsBuffer;


float4 planes[6];

float4x4 _ObjectToWorld;

bool IsOutsideThePlane(float4 plane, float3 pointPosition)
{
    if (dot(plane.xyz, pointPosition) + plane.w > 0)
        return true;
    return false;
}


void objectInteraction(inout float3 bladePosWS , float level )
{
	//因为factor是1，所以用不到pow函数
	//level = pow(level , 1);
	float3 interVec = bladePosWS - _Moving_Position.xyz;
	float3 movingVec = normalize(float3(interVec.x , -0.2 , interVec.z));
	
	bladePosWS += level * movingVec *  _ImpactRadius * smoothstep(0.8,0.3,length(interVec)) ; 
	
	//need to correct

}



float3x3 AngleAxis3x3(float angle, float3 axis)
{
	float c, s;
	sincos(angle, s, c);

	float t = 1 - c;
	float x = axis.x;
	float y = axis.y;
	float z = axis.z;

	return float3x3(
		t * x * x + c, t * x * y - s * z, t * x * z + s * y,
		t * x * y + s * z, t * y * y + c, t * y * z - s * x,
		t * x * z - s * y, t * y * z + s * x, t * z * z + c
		);
}

float rand(float3 co)
{
	return frac(sin(dot(co.xyz, float3(12.9898, 78.233, 53.539))) * 43758.5453);
}



[numthreads(640, 1, 1)]
void UpdateBlade(uint3 gid : SV_GroupID, uint index : SV_GroupIndex , uint3 threadID : SV_GroupThreadID)
{
	
	float3x3 scaleMatrix = float3x3(_BladeWidth,0,1,
									0,_BladeHeight,0,
									0,0,1);
	int pindex = gid.x * 640  + index;
	float BladePosX = pindex % _FieldWidth * _Interval;
    float BladePosZ = pindex / _FieldWidth * _Interval;
	float2 groundUV = float2(BladePosX , BladePosZ)/_Interval /_FieldWidth;
	float3 BladePosOffset = float3(BladePosX,0,BladePosZ);
	
	float2 Winduv = groundUV + _Time/10*_WindFrequency;


	float3 BendVector = normalize(float3(-2.14 , -_BendDownFactor , 1));

	
	float3 windVector = _WindTexture.SampleLevel(sampler_WindTexture , Winduv,0)*2-1;
	float windStrength = dot(windVector,windVector);
	/*
	float2 GrassTowardVector = _GrassToward.SampleLevel(sampler_GrassToward, groundUV,0)*2 -1;
	float3 ForwardVector = normalize(float3(GrassTowardVector.x , 0 ,GrassTowardVector.y));
	float3 UpVector = float3(0,1,0);
	float3 rightVector = normalize(cross(UpVector , ForwardVector));
	float3x3 facingRotationMatrix = float3x3(rightVector, UpVector,ForwardVector);*/

	float3x3 facingRotationMatrix = AngleAxis3x3(rand(BladePosOffset) * UNITY_TWO_PI*0.5  , float3(0, 1, 0));
	float3x3 bendRotationMatrix = AngleAxis3x3(rand(BladePosOffset.zzx) * _BendRotationRandom * UNITY_PI * 0.5 , float3(1, 0, 0));
	float3x3 windRotationMatrix = AngleAxis3x3(windStrength * _WindStrengthFactor , float3(windVector.x,0, windVector.y));
	float3x3 transformMatrix = mul(mul(facingRotationMatrix,mul(bendRotationMatrix , scaleMatrix)),windRotationMatrix);


	for(int i =0; i<pointNum;i++)
	{
		int index = pindex * pointNum + i;
		float3 posTemp = BladeInPosBuffer[i] + pow(BladeInPosBuffer[i].y/BladeInPosBuffer[pointNum-1].y , _Curve) * _BendStrength*0.01 * BendVector;
		
		float3 positionOS = mul(transformMatrix,posTemp);
		float3 positionWS = mul(_ObjectToWorld , float4(positionOS,1)).xyz + BladePosOffset + _ObjectPosition.xyz;
		objectInteraction(positionWS , (float)(i));
		BladeDataBuffer[pindex].posWS[i] = positionWS;
	}
	
	float3 boundVerts[4];
	boundVerts[0] = BladeDataBuffer[pindex].posWS[0];
	boundVerts[1] = BladeDataBuffer[pindex].posWS[1];
	boundVerts[2] = boundVerts[0]*0.5 + boundVerts[1]*0.5;
	boundVerts[3] = BladeDataBuffer[pindex].posWS[pointNum-1];
	boundVerts[2].y = boundVerts[3].y;
	
	
	for (int i = 0; i < 6; i++)
    {
        for (int j = 0; j < 4; j++)
        {
            float3 boundPosition = boundVerts[j];

            if (!IsOutsideThePlane(planes[i], boundPosition))
                break;
            if (j == 3)
                return;
        }
    }


	float3 normalWStri;
	for(int i =2; i<pointNum;i =i+2)
	{
		int index = pindex * pointNum + i-2;
		normalWStri = cross(normalize(BladeDataBuffer[pindex].posWS[i-2] - BladeDataBuffer[pindex].posWS[i]), 
									normalize(BladeDataBuffer[pindex].posWS[i-1] - BladeDataBuffer[pindex].posWS[i]));
		
		BladeDataBuffer[pindex].normalWS[i-2] = normalWStri;
		BladeDataBuffer[pindex].normalWS[i-1] = normalWStri;
		BladeDataBuffer[pindex].normalWS[i] = normalWStri;
	}

	CullingResultsBuffer.Append(BladeDataBuffer[pindex]);

}